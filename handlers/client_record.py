import sqlite3
from aiogram import Router, F, types
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           ReplyKeyboardRemove, InlineKeyboardMarkup,
                           InlineKeyboardButton)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from config import DATABASE_PATH
from db.db_utils import get_active_managers

router = Router()


# –°—Ç–∞–Ω –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
class ClientStates(StatesGroup):
    waiting_for_topic = State()
    waiting_for_seo_link = State()
    waiting_for_aso_link = State()
    waiting_for_contact = State()


# –í–∏–±—ñ—Ä –ø–æ—Å–ª—É–≥–∏ (SEO/ASO)
@router.message(
    F.text.in_({"SEO (–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–∞–π—Ç—É –¥–ª—è –ø–æ—à—É–∫–æ–≤–∏—Ö —Å–∏—Å—Ç–µ–º)", "ASO (–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—ñ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –¥–æ–¥–∞—Ç–∫—ñ–≤)"}))
async def handle_service_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏."""
    service = message.text
    await state.update_data(service=service)

    if "SEO" in service:
        await state.set_state(ClientStates.waiting_for_seo_link)
        await message.answer(
            "–ß—É–¥–æ–≤–∏–π –≤–∏–±—ñ—Ä! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤–∞—à–æ–≥–æ —Å–∞–π—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://yourwebsite.com).")
    elif "ASO" in service:
        await state.set_state(ClientStates.waiting_for_aso_link)
        await message.answer(
            "–ß—É–¥–æ–≤–æ! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à –¥–æ–¥–∞—Ç–æ–∫ —É –º–∞–≥–∞–∑–∏–Ω—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Google Play –∞–±–æ App Store).")


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è SEO
@router.message(ClientStates.waiting_for_seo_link)
async def handle_seo_link(message: types.Message, state: FSMContext):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è SEO."""
    seo_link = message.text
    await state.update_data(seo_link=seo_link)

    await message.answer("–î—è–∫—É—î–º–æ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —â–æ–± –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –º—ñ–≥ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è.",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
                             resize_keyboard=True
                         ))
    await state.set_state(ClientStates.waiting_for_contact)


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è ASO
@router.message(ClientStates.waiting_for_aso_link)
async def handle_aso_link(message: types.Message, state: FSMContext):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è ASO."""
    aso_link = message.text
    await state.update_data(aso_link=aso_link)

    await message.answer("–î—è–∫—É—î–º–æ! –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —â–æ–± –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –º—ñ–≥ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—è.",
                         reply_markup=ReplyKeyboardMarkup(
                             keyboard=[[KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
                             resize_keyboard=True
                         ))
    await state.set_state(ClientStates.waiting_for_contact)


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∫–ª—ñ—î–Ω—Ç–∞
@router.message(F.contact)
async def handle_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É –∫–ª—ñ—î–Ω—Ç–∞."""
    contact = message.contact.phone_number
    user_data = await state.get_data()
    user_id = message.from_user.id
    user_name = message.from_user.username or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
    full_name = message.from_user.full_name
    seo_link = user_data.get("seo_link", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    aso_link = user_data.get("aso_link", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    date = message.date.strftime("%Y-%m-%d")

    try:
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–ø–∏—Å —É–∂–µ —ñ—Å–Ω—É—î
            cursor.execute("SELECT * FROM clients WHERE chat_id = ?", (user_id,))
            existing_client = cursor.fetchone()

            if existing_client:
                # –Ø–∫—â–æ –∑–∞–ø–∏—Å —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
                cursor.execute('''
                    UPDATE clients 
                    SET username = ?, full_name = ?, date = ?, seo_link = ?, aso_link = ?
                    WHERE chat_id = ?
                ''', (user_name, full_name, date, seo_link, aso_link, user_id))
            else:
                # –Ø–∫—â–æ –∑–∞–ø–∏—Å—É –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π
                cursor.execute('''
                    INSERT INTO clients (username, full_name, chat_id, date, seo_link, aso_link)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (user_name, full_name, user_id, date, seo_link, aso_link))

            conn.commit()

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
        topic = "SEO" if seo_link != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" else "ASO"

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        active_managers = get_active_managers()
        for manager_id, manager_name in active_managers:
            try:
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="–ü–æ—á–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data=f"start_consult:{user_id}")]
                    ]
                )
                await message.bot.send_message(
                    chat_id=manager_id,
                    text=f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
                         f"üë§ –Ü–º'—è: {full_name}\n"
                         f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
                         f"üîó –¢–µ–º–∞: {topic}\n"
                         f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {seo_link if topic == 'SEO' else aso_link}\n\n"
                         f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ—á–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é.",
                    reply_markup=keyboard
                )
            except Exception as err:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name}: {err}")

        await message.answer("–î—è–∫—É—î–º–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()
    except sqlite3.Error as e:
        await message.answer(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
