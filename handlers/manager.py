import sqlite3
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (CallbackQuery, InlineKeyboardMarkup,
                           ReplyKeyboardMarkup, InlineKeyboardButton,
                           KeyboardButton)
from config import DATABASE_PATH, ADMIN_IDS
from aiogram.fsm.state import State, StatesGroup
from keyboard.client_key import get_manager_consultation

router = Router()


# –°—Ç–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–∞
class ManagerStates(StatesGroup):
    waiting_for_client = State()
    in_chat = State()


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
def is_manager(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    with sqlite3.connect(DATABASE_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT name FROM managers WHERE id = ?",
            (user_id,)
        )
        return bool(cursor.fetchone())


reply_keyboard = get_manager_consultation()



# @router.message(Command("start_work"))
# async def start_work(message: types.Message, state: FSMContext):
#     """–ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫."""
#     user_id = message.from_user.id
#     manager_name = message.from_user.full_name
#
#     # –ê–∫—Ç–∏–≤—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
#     with sqlite3.connect(DATABASE_PATH) as conn:
#         cursor = conn.cursor()
#         cursor.execute(
#             "UPDATE managers SET active = 1 WHERE id = ?",
#             (user_id,)
#         )
#         conn.commit()
#
#     await state.set_state(ManagerStates.waiting_for_client)
#     await message.answer(f"–í—ñ—Ç–∞—é, {manager_name}! –í–∏ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ "
#                          f"—Ä–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–∞—è–≤–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤..."
#                          )
#
#     # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –∑–∞—è–≤–∫–∏
#     with sqlite3.connect(DATABASE_PATH) as conn:
#         cursor = conn.cursor()
#         cursor.execute("""
#             SELECT username, full_name, seo_link, aso_link, user_text, chat_id
#             FROM clients
#             WHERE is_sent = 0
#         """)
#         pending_requests = cursor.fetchall()
#
#     # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Å—ñ—Ö –Ω–µ–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫
#     if pending_requests:
#         for username, full_name, seo_link, aso_link, user_text, chat_id in pending_requests:
#             # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—è–≤–∫–∞ –≤–∂–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü—ñ consultations
#             with sqlite3.connect(DATABASE_PATH) as conn:
#                 cursor = conn.cursor()
#                 cursor.execute(
#                     "SELECT manager_id FROM consultations WHERE client_id = ?",
#                     (chat_id,)
#                 )
#                 consultation = cursor.fetchone()
#
#             if consultation:
#                 # –Ø–∫—â–æ –∑–∞—è–≤–∫–∞ –≤–∂–µ –≤ —Ä–æ–±–æ—Ç—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ó—ó
#                 continue
#
#             # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
#             topic = "SEO" if seo_link else "ASO" if aso_link else "–ù–µ –æ–±—Ä–∞–Ω–æ"
#             link = seo_link if seo_link else aso_link if aso_link else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
#
#             # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
#             keyboard = InlineKeyboardMarkup(
#                 inline_keyboard=[
#                     [InlineKeyboardButton(
#                         text="–ü–æ—á–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é",
#                         callback_data=f"start_consult:{chat_id}"
#                     )
#                     ]
#                 ]
#             )
#
#             # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
#             try:
#                 await message.bot.send_message(
#                     chat_id=user_id,
#                     text=f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
#                          f"üë§ –Ü–º'—è: {full_name}\n"
#                          f"üîó –¢–µ–º–∞: {topic}\n"
#                          f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {link}\n"
#                          f"üìù –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {user_text or '–ù–µ –Ω–∞–¥–∞–Ω–æ'}",
#                     reply_markup=keyboard
#                 )
#
#                 # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ —è–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π
#                 with sqlite3.connect(DATABASE_PATH) as conn:
#                     cursor = conn.cursor()
#                     cursor.execute(
#                         "UPDATE clients SET is_sent = 1 WHERE chat_id = ?",
#                         (chat_id,)
#                     )
#                     conn.commit()
#
#             except Exception as e:
#                 print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name}: {e}")
#
#         await message.answer("–í—Å—ñ –∑–∞—è–≤–∫–∏, –ø–æ–¥–∞–Ω—ñ –≤ –Ω–µ—Ä–æ–±–æ—á–∏–π —á–∞—Å, "
#                              "–±—É–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤–∞–º –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
#     else:
#         await message.answer("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")


# –ö–æ–º–∞–Ω–¥–∞ /end_work
@router.message(Command("end_work"))
async def end_work(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    with sqlite3.connect(DATABASE_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE managers SET active = 0 WHERE id = ?",
            (user_id,)
        )
        conn.commit()

    await state.clear()  # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å—Ç–∞–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    await message.answer("–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–æ–±–æ—Ç—É. –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")

@router.message(Command("start_work"))
async def start_work(message: types.Message, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∞—Ü—ñ—è —Å—Ç–∞—Ç—É—Å—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫."""
    user_id = message.from_user.id
    manager_name = message.from_user.full_name

    # –ê–∫—Ç–∏–≤—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    with sqlite3.connect(DATABASE_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("UPDATE managers SET active = 1 WHERE id = ?", (user_id,))
        conn.commit()

    await state.set_state(ManagerStates.waiting_for_client)
    await message.answer(f"–í—ñ—Ç–∞—é, {manager_name}! –í–∏ –∞–∫—Ç–∏–≤—É–≤–∞–ª–∏ —Ä–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–∞—è–≤–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤...")

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–µ–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –∑–∞—è–≤–∫–∏
    with sqlite3.connect(DATABASE_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT username, full_name, seo_link, aso_link, user_text, chat_id
            FROM clients
            WHERE is_sent = 0
        """)
        pending_requests = cursor.fetchall()

    # –Ø–∫—â–æ —î –∑–∞—è–≤–∫–∏
    if pending_requests:
        for username, full_name, seo_link, aso_link, user_text, chat_id in pending_requests:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—è–≤–∫–∞ –≤–∂–µ –≤ —Ä–æ–±–æ—Ç—ñ
            with sqlite3.connect(DATABASE_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT manager_id FROM consultations WHERE client_id = ?", (chat_id,))
                consultation = cursor.fetchone()

            if consultation:
                # –Ø–∫—â–æ –∑–∞—è–≤–∫–∞ –≤–∂–µ –≤ —Ä–æ–±–æ—Ç—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                continue

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
            topic = "SEO" if seo_link else "ASO" if aso_link else "–ù–µ –æ–±—Ä–∞–Ω–æ"
            link = seo_link if seo_link else aso_link if aso_link else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

            # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ—á–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é", callback_data=f"start_consult:{chat_id}")]
                ]
            )

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            try:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞:\n"
                         f"üë§ –Ü–º'—è: {full_name}\n"
                         f"üîó –¢–µ–º–∞: {topic}\n"
                         f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {link}\n"
                         f"üìù –û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {user_text or '–ù–µ –Ω–∞–¥–∞–Ω–æ'}",
                    reply_markup=keyboard
                )

                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                with sqlite3.connect(DATABASE_PATH) as conn:
                    cursor = conn.cursor()
                    cursor.execute("UPDATE clients SET is_sent = 1 WHERE chat_id = ?", (chat_id,))
                    conn.commit()

            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_name}: {e}")

        await message.answer("–í—Å—ñ –∑–∞—è–≤–∫–∏, –ø–æ–¥–∞–Ω—ñ –≤ –Ω–µ—Ä–æ–±–æ—á–∏–π —á–∞—Å, –±—É–ª–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –≤–∞–º –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
    else:
        await message.answer("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")



@router.message(Command("end_chat"))
async def end_chat(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó."""
    data = await state.get_data()
    client_chat_id = data.get("client_chat_id")

    if client_chat_id:
        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å —ñ–∑ —Ç–∞–±–ª–∏—Ü—ñ consultations
            with sqlite3.connect(DATABASE_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "DELETE FROM consultations WHERE client_id = ?",
                    (client_chat_id,))
                conn.commit()

            await message.bot.send_message(client_chat_id, "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é "
                                                           "–∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ "
                                                           "–∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!")
            await message.answer("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –æ—á—ñ–∫—É–≤–∞—Ç–∏ "
                                 "–Ω–∞ –Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó: {e}")
    else:
        await message.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")

    await state.clear()  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
async def send_request_to_manager(bot, manager_id, client_data):
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="–ü–æ—á–∞—Ç–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é",
                callback_data=f"start_consult_{client_data['chat_id']}")]
        ]
    )
    await bot.send_message(
        manager_id,
        f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞!\n"
        f"–Ü–º'—è: {client_data['username']}\n"
        f"–¢–µ–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó: {client_data['topic']}\n"
        f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {client_data['link']}\n"
        f"–û–ø–∏—Å –ø—Ä–æ–±–ª–µ–º–∏: {client_data['user_text']}",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("start_consult:"))
async def start_consultation(callback: CallbackQuery, state: FSMContext):
    client_chat_id = int(callback.data.split(":")[1])
    manager_id = callback.from_user.id

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—è–≤–∫–∞ –≤–∂–µ –≤ —Ä–æ–±–æ—Ç—ñ
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT manager_id FROM consultations WHERE client_id = ?
            """, (client_chat_id,))
            result = cursor.fetchone()
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT name FROM managers WHERE id = ?
            """, (manager_id,))
            manager_name = cursor.fetchone()
        manager_name = manager_name[0]

        if result:
            # –ó–∞—è–≤–∫–∞ –≤–∂–µ –≤ —Ä–æ–±–æ—Ç—ñ
            existing_manager_id = result[0]
            if existing_manager_id == manager_id:
                await callback.message.answer(
                    "–í–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î—Ç–µ –Ω–∞–¥ —Ü—ñ—î—é –∑–∞—è–≤–∫–æ—é."
                )
            else:
                await callback.message.answer(
                    "–ó–∞—è–≤–∫—É –≤–∂–µ –≤–∑—è–≤ –≤ —Ä–æ–±–æ—Ç—É —ñ–Ω—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä."
                )
            await callback.answer()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ callback
            return

        # –î–æ–¥–∞—î–º–æ –∑–∞—è–≤–∫—É –¥–æ —Ç–∞–±–ª–∏—Ü—ñ consultations
        with sqlite3.connect(DATABASE_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO consultations (client_id, manager_id)
                VALUES (?, ?)
            """, (client_chat_id, manager_id))
            conn.commit()

        # –ü–æ—á–∞—Ç–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
        await state.set_state(ManagerStates.in_chat)
        await state.update_data(client_chat_id=client_chat_id)

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await callback.message.answer(
            "–í–∏ –ø–æ—á–∞–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é. –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ "
            "–æ–±–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –∑ –∫–ª—ñ—î–Ω—Ç–æ–º.")

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
        await callback.bot.send_message(
            client_chat_id,
            f"–ü—Ä–∏–≤—ñ—Ç üëã–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ {manager_name}. "
            f"–Ø –º–µ–Ω–µ–¥–∂–µ—Ä –¥—ñ–¥–∂–∏—Ç–∞–ª –∞–≥–µ–Ω—Ü—ñ—ó UPCORN AGENCY.  "
            f"–ë—É–¥—É —Ä–∞–¥–∞ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!")
        await callback.answer()

    except sqlite3.IntegrityError:
        # –£ —Ä–∞–∑—ñ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞—è–≤–∫–∏
        await callback.message.answer("–ó–∞—è–≤–∫—É –≤–∂–µ –≤–∑—è–≤ —ñ–Ω—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä.")
        await callback.answer()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó: {e}")
        await callback.message.answer(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó."
        )


@router.message(ManagerStates.in_chat)
async def chat_with_client(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–æ –∫–ª—ñ—î–Ω—Ç–∞."""
    data = await state.get_data()
    client_chat_id = data.get("client_chat_id")

    if client_chat_id:
        try:
            await message.bot.send_message(
                client_chat_id,
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {message.text}"
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É: {e}")
    else:
        await message.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É –∑ –∫–ª—ñ—î–Ω—Ç–æ–º.")


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
def get_manager_for_client(client_chat_id):
    """–û—Ç—Ä–∏–º—É—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞."""
    with sqlite3.connect(DATABASE_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT manager_id FROM consultations
            WHERE client_id = ?
        """, (client_chat_id,))
        result = cursor.fetchone()
        return result[0] if result else None


# –û–±–º—ñ–Ω –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@router.message()
async def client_message_handler(message: types.Message):
    """–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–ª—ñ—î–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
    client_chat_id = message.from_user.id
    manager_chat_id = get_manager_for_client(client_chat_id)

    if manager_chat_id:
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            with sqlite3.connect(DATABASE_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT full_name FROM clients WHERE chat_id = ?",
                    (client_chat_id,)
                )
                client_name = cursor.fetchone()

            # –Ø–∫—â–æ —ñ–º'—è –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ, —ñ–Ω–∞–∫—à–µ —Å—Ç–∞–≤–∏–º–æ "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç"
            client_name = client_name[0] if client_name else "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–ª—ñ—î–Ω—Ç"

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await message.bot.send_message(
                manager_chat_id,
                f"{client_name}: {message.text}"
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
    else:
        await message.answer(
            "–ù–∞ –∂–∞–ª—å, —è –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—Ä–∞–∑. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ, –ø–æ–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏."
        )



# @router.message()
# async def client_message_handler(message: types.Message):
#     """–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–ª—ñ—î–Ω—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
#     user_id = message.from_user.id
#
#     # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∫–ª—ñ—î–Ω—Ç
#     client_chat_id = message.from_user.id
#     manager_chat_id = get_manager_for_client(client_chat_id)
#
#     if manager_chat_id:
#         try:
#             await message.bot.send_message(
#                 manager_chat_id,
#                 f"–ö–ª—ñ—î–Ω—Ç: {message.text}"
#             )
#         except Exception as e:
#             print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
#     else:
#         # –†–µ–ø–ª–∞–π-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–ø—Ü—ñ–π
#         reply_keyboard = ReplyKeyboardMarkup(
#             keyboard=[
#                 [KeyboardButton(text="SEO (–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Å–∞–π—Ç—É –¥–ª—è –ø–æ—à—É–∫–æ–≤–∏—Ö —Å–∏—Å—Ç–µ–º)")],
#                 [KeyboardButton(text="ASO (–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—ñ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –¥–æ–¥–∞—Ç–∫—ñ–≤)")]
#             ],
#             resize_keyboard=True
#         )
#         await message.answer(
#             "–ù–∞ –∂–∞–ª—å, —è –Ω–µ –∑–æ–≤—Å—ñ–º –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à –≤–∏–±—ñ—Ä. "
#             "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π: SEO –∞–±–æ ASO.",
#             reply_markup=reply_keyboard
#         )
#
#     # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
#     if user_id in ADMIN_IDS:
#         await message.answer("–ú–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.")
#         return
#
#     # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–µ–Ω–µ–¥–∂–µ—Ä
#     if is_manager(user_id):
#         await message.answer("–ú–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–æ—é /start.")
#         return




